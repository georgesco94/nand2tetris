// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zero or negate x and y
    Mux16(a=x, b=false, sel=zx, out=xOrZero);
    Not16(in=xOrZero, out=notx);
    Mux16(a=xOrZero, b=notx, sel=nx, out=xOrNegativeX);

    Mux16(a=y, b=false, sel=zy, out=yOrZero);
    Not16(in=yOrZero, out=noty);
    Mux16(a=yOrZero, b=noty, sel=ny, out=yOrNegativeX);

    // Add or And x and y
    Add16(a=xOrNegativeX, b=yOrNegativeX, out=xPlusy);
    And16(a=xOrNegativeX, b=yOrNegativeX, out=xAndy);
    Mux16(a=xAndy, b=xPlusy, sel=f, out=inputsSummedOrAnd);

    // Negate output?
    Not16(in=inputsSummedOrAnd, out=negatedOutput);
    Mux16(a=inputsSummedOrAnd, b=negatedOutput, sel=no, out=out, out[0]=out0, out[1]=out1,out[2]=out2,out[3]=out3,out[4]=out4,out[5]=out5,out[6]=out6,out[7]=out7,out[8]=out8,out[9]=out9,out[10]=out10,out[11]=out11,out[12]=out12,out[13]=out13,out[14]=out14,out[15]=out15);

    Or(a=out0, b=out1, out=a1);
    Or(a=a1, b=out2, out=a2);
    Or(a=a2, b=out3, out=a3);
    Or(a=a3, b=out4, out=a4);
    Or(a=a4, b=out5, out=a5);
    Or(a=a5, b=out6, out=a6);
    Or(a=a6, b=out7, out=a7);
    Or(a=a7, b=out8, out=a8);
    Or(a=a8, b=out9, out=a9);
    Or(a=a9, b=out10, out=a10);
    Or(a=a10, b=out11, out=a11);
    Or(a=a11, b=out12, out=a12);
    Or(a=a12, b=out13, out=a13);
    Or(a=a13, b=out14, out=a14);
    Or(a=a14, b=out15, out=a15);
    Not(in=a15, out=zr);

    Mux(a=false, b=true, sel=out15, out=ng);
}